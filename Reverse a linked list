HackerRank Home
HackerRank
|
Prepare
Certify
Compete
Apply
Search
 
All Contests  mpec-hcs4-aug08  Reverse a linked list
Reverse a linked listlocked
Problem
Submissions
Leaderboard
Discussions
Submitted 9 hours ago • Score: 5.00Status: Accepted
 Test Case #0
 Test Case #1
 Test Case #2
 Test Case #3
 Test Case #4
 Test Case #5
 Test Case #6

Submitted Code
Language: Java 15

 Open in editor
temp =head ;
        for(int i:al)
        {
            temp.data=i;
            temp=temp.next;
            
        }
       return head;
1
import java.io.*;
2
import java.math.*;
3
import java.security.*;
4
import java.text.*;
5
import java.util.*;
6
import java.util.concurrent.*;
7
import java.util.function.*;
8
import java.util.regex.*;
9
import java.util.stream.*;
10
import static java.util.stream.Collectors.joining;
11
import static java.util.stream.Collectors.toList;
12
​
13
class SinglyLinkedListNode {
14
    public int data;
15
    public SinglyLinkedListNode next;
16
​
17
    public SinglyLinkedListNode(int nodeData) {
18
        this.data = nodeData;
19
        this.next = null;
20
    }
21
}
22
​
23
class SinglyLinkedList {
24
    public SinglyLinkedListNode head;
25
    public SinglyLinkedListNode tail;
26
​
27
    public SinglyLinkedList() {
28
        this.head = null;
29
        this.tail = null;
30
    }
31
​
32
    public void insertNode(int nodeData) {
33
        SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);
34
​
35
        if (this.head == null) {
36
            this.head = node;
37
        } else {
38
            this.tail.next = node;
39
        }
40
​
41
        this.tail = node;
42
    }
43
}
44
​
45
class SinglyLinkedListPrintHelper {
46
    public static void printList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
47
        while (node != null) {
48
            bufferedWriter.write(String.valueOf(node.data));
49
​
50
            node = node.next;
51
​
52
            if (node != null) {
53
                bufferedWriter.write(sep);
54
            }
55
        }
56
    }
57
}
58
​
59
class Result {
60
​
61
    /*
62
     * Complete the 'reverse' function below.
63
     *
64
     * The function is expected to return an INTEGER_SINGLY_LINKED_LIST.
65
     * The function accepts INTEGER_SINGLY_LINKED_LIST llist as parameter.
66
     */
67
​
68
    /*
69
     * For your reference:
70
     *
71
     * SinglyLinkedListNode {
72
     *     int data;
73
     *     SinglyLinkedListNode next;
74
     * }
75
     *
76
     */
77
​
78
    public static SinglyLinkedListNode reverse(SinglyLinkedListNode head) {
79
    // Write your code here
80
       SinglyLinkedListNode temp =head ;
81
       ArrayList<Integer> al = new ArrayList<>();
82
        while(temp!=null)
83
        {
84
            al.add(temp.data);
85
            temp= temp.next;
86
        }
87
        Collections.reverse(al);
88
        temp =head ;
89
        for(int i:al)
90
        {
91
            temp.data=i;
92
            temp=temp.next;
93
            
94
        }
95
       return head;
96
​
97
    }
98
​
99
}
100
​
101
public class Solution {
102
    public static void main(String[] args) throws IOException {
103
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
104
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));
105
​
106
        int tests = Integer.parseInt(bufferedReader.readLine().trim());
107
​
108
        IntStream.range(0, tests).forEach(testsItr -> {
109
            try {
110
                SinglyLinkedList llist = new SinglyLinkedList();
111
​
112
                int llistCount = Integer.parseInt(bufferedReader.readLine().trim());
113
​
114
                IntStream.range(0, llistCount).forEach(i -> {
115
                    try {
116
                        int llistItem = Integer.parseInt(bufferedReader.readLine().trim());
117
​
118
                        llist.insertNode(llistItem);
119
                    } catch (IOException ex) {
120
                        throw new RuntimeException(ex);
121
                    }
122
                });
123
​
124
                SinglyLinkedListNode llist1 = Result.reverse(llist.head);
125
​
126
                SinglyLinkedListPrintHelper.printList(llist1, " ", bufferedWriter);
127
                bufferedWriter.newLine();
128
            } catch (IOException ex) {
129
                throw new RuntimeException(ex);
130
            }
131
        });
132
​
133
        bufferedReader.close();
134
        bufferedWriter.close();
135
    }
136
}
137
​
Interview Prep | Blog | Scoring | Environment | FAQ | About Us | Support | Careers | Terms Of Service | Privacy Policy |

